service: goclassifieds-api
frameworkVersion: '3'
plugins:
  - serverless-prune-plugin
  - serverless-custom-packaging-plugin
custom:
  elasticUrl: ${file(./private.${opt:stage, 'dev'}.json):elasticUrl}
  keyspaceUsername: ${file(./private.${opt:stage, 'dev'}.json):keyspaceUsername}
  keyspacePassword: ${file(./private.${opt:stage, 'dev'}.json):keyspacePassword}
  apigatewayEndpoint: ${file(./private.${opt:stage, 'dev'}.json):apigatewayEndpoint}
  userPoolId: ${file(./private.${opt:stage, 'dev'}.json):userPoolId}
  userPoolArn: ${file(./private.${opt:stage, 'dev'}.json):userPoolArn}
  identityPoolId: ${file(./private.${opt:stage, 'dev'}.json):identityPoolId}
  issuer: ${file(./private.${opt:stage, 'dev'}.json):issuer}
  cognitoAppClientId: ${file(./private.${opt:stage, 'dev'}.json):cognitoAppClientId}
  bucketName: ${file(./private.${opt:stage, 'dev'}.json):bucketName}
  proxyAveDomain: ${file(./private.${opt:stage, 'dev'}.json):proxyAveDomain}
  proxyCarbonAwareDomain: ${file(./private.${opt:stage, 'dev'}.json):proxyCarbonAwareDomain}
  aveApikey: ${file(./private.${opt:stage, 'dev'}.json):aveApikey}
  githubToken: ${file(./private.${opt:stage, 'dev'}.json):githubToken}
  githubBranch: ${file(./private.${opt:stage, 'dev'}.json):githubBranch}
  githubAppId: ${file(./private.${opt:stage, 'dev'}.json):githubAppId}
  githubAppClientId: ${file(./private.${opt:stage, 'dev'}.json):githubAppClientId}
  githubAppClientSecret: ${file(./private.${opt:stage, 'dev'}.json):githubAppClientSecret}
  awsAccountId: ${file(./private.${opt:stage, 'dev'}.json):awsAccountId}
  defaultSigningUsername: ${file(./private.${opt:stage, 'dev'}.json):defaultSigningUsername}
  defaultSigningPassword: ${file(./private.${opt:stage, 'dev'}.json):defaultSigningPassword}
  clusteringEnabled: ${file(./private.${opt:stage, 'dev'}.json):clusteringEnabled}
  clusteringMax: ${file(./private.${opt:stage, 'dev'}.json):clusteringMax}
  catalogPageMax: ${file(./private.${opt:stage, 'dev'}.json):catalogPageMax}
  saveToFileSystem: ${file(./private.${opt:stage, 'dev'}.json):saveToFileSystem}
  filesystemRoot: ${file(./private.${opt:stage, 'dev'}.json):filesystemRoot}
  marvelApiPublicKey: ${file(./private.${opt:stage, 'dev'}.json):marvelApiPublicKey}
  marvelApiPrivateKey: ${file(./private.${opt:stage, 'dev'}.json):marvelApiPrivateKey}
  comicvineApiKey: ${file(./private.${opt:stage, 'dev'}.json):comicvineApiKey}
  cloudName: ${file(./private.${opt:stage, 'dev'}.json):cloudName}
provider:
  name: aws
  runtime: provided.al2023
  memorySize: 256
  timeout: 20
  websocketsApiName: goclassifieds-stream
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  #logs:
    #websocket: true
  httpApi:
    payload: '1.0'
    cors: true
    authorizers:
      authorizer2:
        type: request
        functionName: Authorize2
package:
  individually: true
resources:
  Resources:
    EntityApiRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        RoleName: goclassifieds-entity-api-${opt:region, 'us-east-1'}-lambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole   
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: goclassifieds-entity-api-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                    - "execute-api:ManageConnections"
                  Resource: "*"
                - Effect: "Allow"
                  Action: "states:StartExecution"
                  Resource: "*"
functions:
  EntityApi:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/entity
      artifact: .serverless/EntityApi.zip
      libs: api/entity
      include_globs:
        - "**/bootstrap"
        - "**/*.json.tmpl"
        - "**/*.pem"
    environment:
      ELASTIC_URL: ${self:custom.elasticUrl}
      BUCKET_NAME: ${self:custom.bucketName}
      GITHUB_TOKEN: ${self:custom.githubToken}
      GITHUB_BRANCH: ${self:custom.githubBranch}
      GITHUB_APP_ID: ${self:custom.githubAppId}
      USER_POOL_ID: ${self:custom.userPoolId}
      IDENTITY_POOL_ID: ${self:custom.identityPoolId}
      ISSUER: ${self:custom.issuer}
      DEFAULT_SIGNING_USERNAME: ${self:custom.defaultSigningUsername}
      DEFAULT_SIGNING_PASSWORD: ${self:custom.defaultSigningPassword}
      CLUSTERING_ENABLED: ${self:custom.clusteringEnabled}
      CLUSTERING_MAX: ${self:custom.clusteringMax}
      CATALOG_PAGE_MAX: ${self:custom.catalogPageMax}
      SAVE_TO_FILE_SYSTEM: ${self:custom.saveToFileSystem}
      FILESYSTEM_ROOT: ${self:custom.filesystemRoot}
      CLOUD_NAME: ${self:custom.cloudName}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /adtypes/{proxy+}
          method: GET
      - httpApi:
          path: /adlistitems/{proxy+}
          method: GET
      - httpApi:
          path: /featurelistitems/{proxy+}
          method: GET
      - httpApi:
          path: /ad/{id}
          method: GET
      - httpApi:
          path: /profile/{id}
          method: GET
      - httpApi:
          path: /adprofile/{id}
          method: GET
      - httpApi:
          path: /panelpagelistitems/{proxy+}
          method: GET
      - httpApi:
          path: /{owner}/{repo}/shapeshifter/{proxy+}
          method: POST
          authorizer:
            name: authorizer2
      - httpApi:
          path: /{owner}/{repo}/shapeshifter/{proxy+}
          method: PUT
          authorizer:
            name: authorizer2
      - httpApi:
          path: /{owner}/{repo}/shapeshifter/{proxy+}
          method: GET
      - httpApi:
          path: /{site}/panelpage/{proxy+}
          method: POST
      - httpApi:
          path: /{site}/panelpage/{proxy+}
          method: PUT
      - httpApi:
          path: /{site}/panelpage/{id}
          method: GET
  MediaApi:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/media
      artifact: .serverless/MediaApi.zip
      libs: api/media
      include_globs:
        - "**/bootstrap"
        - "**/*.pem"
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      STAGE: ${opt:stage, 'dev'}
      GITHUB_TOKEN: ${self:custom.githubToken}
      GITHUB_BRANCH: ${self:custom.githubBranch}
      GITHUB_APP_ID: ${self:custom.githubAppId}
      DEFAULT_SIGNING_USERNAME: ${self:custom.defaultSigningUsername}
      DEFAULT_SIGNING_PASSWORD: ${self:custom.defaultSigningPassword}
    events:
      - httpApi:
          path: /{owner}/{repo}/media
          method: POST
            #scopes:
              #- media_api/media_api
      - httpApi:
          path: /{site}/media
          method: POST
            #scopes:
              #- media_api/media_api
      - httpApi:
          path: /{owner}/{repo}/media/{prefix}
          method: GET
      - httpApi:
          path: /{site}/media/{prefix}
          method: GET
  UserApi:
    # handler: bazel-out/darwin_arm64-fastbuild-ST-5fa8105c1248/bin/api/user/user_/user
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/user
      artifact: .serverless/UserApi.zip
      include_globs:
        - "**/bootstrap"
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      COGNITO_APP_CLIENT_ID: ${self:custom.cognitoAppClientId}
      STAGE: ${opt:stage, 'dev'}
      GITHUB_APP_CLIENT_ID: ${self:custom.githubAppClientId}
      GITHUB_APP_CLIENT_SECRET: ${self:custom.githubAppClientSecret}
    events:
      - httpApi:
          path: /publicuserprofile/{id}
          method: GET
      - httpApi:
          path: /github/signup
          method: GET
      - httpApi:
          path: /github/marketplace/event
          method: POST
  ProxyApi:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/proxy
      artifact: .serverless/ProxyApi.zip
      include_globs:
        - "**/bootstrap"
    environment:
      PROXY_AVE_DOMAIN: ${self:custom.proxyAveDomain}
      PROXY_AVE_APIKEY: ${self:custom.aveApikey}
      PROXY_CARBONAWARE_DOMAIN: ${self:custom.proxyCarbonAwareDomain}
      MARVEL_API_PUBLIC_KEY: ${self:custom.marvelApiPublicKey}
      MARVEL_API_PRIVATE_KEY: ${self:custom.marvelApiPrivateKey}
      COMICVINE_API_KEY: ${self:custom.comicvineApiKey}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /cities/{country}/{state}/{city}
          method: GET
      - httpApi:
          path: /ave
          method: GET
      - httpApi:
          path: /carbonaware/{proxy+}
          method: GET
      - httpApi:
          path: /marvel/{proxy+}
          method: GET
      - httpApi:
          path: /comicvine/{proxy+}
          method: GET
  ChatApi:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/chat
      artifact: .serverless/ChatApi.zip
      include_globs:
        - "**/bootstrap"
    environment:
      KEYSPACE_USERNAME: ${self:custom.keyspaceUsername}
      KEYSPACE_PASSWORD: ${self:custom.keyspacePassword}
      APIGATEWAY_ENDPOINT: ${self:custom.apigatewayEndpoint}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /chatmessage/{proxy+}
          method: POST
      - httpApi:
          path: /chatconversations/{proxy+}
          method: GET
      - httpApi:
          path: /lead/{proxy+}
          method: POST
      - httpApi:
          path: /leads/{proxy+}
          method: GET
      - httpApi:
          path: /page/{proxy+}
          method: POST
      - httpApi:
          path: /pages/{proxy+}
          method: GET
      - httpApi:
          path: /gridlayout/{proxy+}
          method: POST
      - httpApi:
          path: /gridlayouts/{proxy+}
          method: GET
  GovApi:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/gov
      artifact: .serverless/GovApi.zip
      include_globs:
        - "**/bootstrap"
    environment:
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /grant/{type}/{user}/{resource}/{op}/{proxy+}
          method: GET
  ValidateEntity:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/func/validate_entity
      artifact: .serverless/ValidateEntity.zip
      include_globs:
        - "**/bootstrap"
    environment:
      STAGE: ${opt:stage, 'dev'}
  GrantAccess:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/func/grant_access
      libs: func/grant_access
      artifact: .serverless/GrantAccess.zip
      include_globs:
        - "**/bootstrap"
        - "**/AmazonRootCA1.pem"
    environment:
      STAGE: ${opt:stage, 'dev'}
      KEYSPACE_USERNAME: ${self:custom.keyspaceUsername}
      KEYSPACE_PASSWORD: ${self:custom.keyspacePassword}
  # Kill enforce contract for now because issue with esbuild json compilation.
  EnforceContract:
    handler: enforce_contract.handler
    role: EntityApiRole
    runtime: nodejs16.x
    package:
      path: bazel-bin/func/enforce_contract
      artifact: .serverless/EnforceContract.zip
      include_globs:
        - "**/enforce_contract.js"
  EncryptSecretValue:
    handler: encrypt_secret_value.handler
    role: EntityApiRole
    runtime: nodejs16.x
    package:
      path: bazel-bin/func/encrypt_secret_value
      artifact: .serverless/EncryptSecretValue.zip
      include_globs:
        - "**/encrypt_secret_value.js"
  Stream:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/api/stream
      artifact: .serverless/Stream.zip
      libs: api/stream
      include_globs:
        - "**/bootstrap"
        - "**/AmazonRootCA1.pem"
    environment:
      KEYSPACE_USERNAME: ${self:custom.keyspaceUsername}
      KEYSPACE_PASSWORD: ${self:custom.keyspacePassword}
      STAGE: ${opt:stage, 'dev'}
    events:
      - websocket:
          route: $connect
          authorizer:
            name: Authorize
            identitySource:
              - 'route.request.querystring.token'
      - websocket:
          route: $disconnect
  RenewableRecord:
    handler: bootstrap
    role: EntityApiRole
    package:
      path: bazel-bin/func/renewable_record
      artifact: .serverless/RenewableRecord.zip
      include_globs:
        - "**/bootstrap"
    environment:
      COGNITO_APP_CLIENT_ID: ${self:custom.cognitoAppClientId}
      ELASTIC_URL: ${self:custom.elasticUrl}
      IDENTITY_POOL_ID: ${self:custom.identityPoolId}
      ISSUER: ${self:custom.issuer}
      DEFAULT_SIGNING_USERNAME: ${self:custom.defaultSigningUsername}
      DEFAULT_SIGNING_PASSWORD: ${self:custom.defaultSigningPassword}
      BUCKET_NAME: ${self:custom.bucketName}
      STAGE: ${opt:stage, 'dev'}
  Authorize:
    handler: bootstrap
    package:
      path: bazel-bin/api/authorizer
      artifact: .serverless/Authorizer.zip
      include_globs:
        - "**/bootstrap"
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      STAGE: ${opt:stage, 'dev'}
  Authorize2:
    handler: bootstrap
    package:
      path: bazel-bin/api/authorizer2
      artifact: .serverless/Authorizer2.zip
      include_globs:
        - "**/bootstrap"
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      STAGE: ${opt:stage, 'dev'}
  Authorize3:
    handler: bootstrap
    package:
      path: bazel-bin/api/authorizer3
      artifact: .serverless/Authorizer3.zip
      include_globs:
        - "**/bootstrap"
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      STAGE: ${opt:stage, 'dev'}