service: goclassifieds-splits-api
frameworkVersion: '3'
plugins:
  - serverless-prune-plugin
  - serverless-custom-packaging-plugin
custom:
  githubToken: ${file(./private.${opt:stage, 'dev'}.json):githubToken}
  githubAppId: ${file(./private.${opt:stage, 'dev'}.json):githubAppId}
provider:
  name: aws
  runtime: provided.al2023
  memorySize: 512
  timeout: 45
  #logs:
    #websocket: true
  httpApi:
    payload: '1.0'
    cors: true
package:
  individually: true
resources:
  Resources:
    SplitsRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        RoleName: splits-${opt:region, 'us-east-1'}-lambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole   
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: goclassifieds-splits-api-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                    - "execute-api:ManageConnections"
                  Resource: "*"
functions:
  ModelApi:
    handler: bootstrap
    role: SplitsRole
    package:
      path: bazel-bin/api/model
      artifact: .serverless/ModelApi.zip
      libs: api/entity
      include_globs:
        - "**/bootstrap"
        - "**/*.json.tmpl"
        - "**/*.pem"
    environment:
      GITHUB_TOKEN: ${self:custom.githubToken}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /model/{proxy+}
          method: POST
  IndexApi:
    handler: bootstrap
    role: SplitsRole
    package:
      path: bazel-bin/api/index
      artifact: .serverless/IndexApi.zip
      libs: api/entity
      include_globs:
        - "**/bootstrap"
        - "**/*.json.tmpl"
        - "**/*.pem"
    environment:
      GITHUB_APP_ID: ${self:custom.githubAppId}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /{owner}/{repo}/index/{index}
          method: GET
      - httpApi:
          path: /{owner}/{repo}/search
          method: POST
  IndexCreateHook:
    handler: bootstrap
    role: SplitsRole
    package:
      path: bazel-bin/hooks/index_create
      artifact: .serverless/Index_Create.zip
      libs: api/entity
      include_globs:
        - "**/bootstrap"
        - "**/*.json.tmpl"
        - "**/*.pem"
    environment:
      GITHUB_APP_ID: ${self:custom.githubAppId}
      STAGE: ${opt:stage, 'dev'}
  EntityIndexHook:
    handler: bootstrap
    role: SplitsRole
    package:
      path: bazel-bin/hooks/entity_index
      artifact: .serverless/Entity_Index.zip
      libs: api/entity
      include_globs:
        - "**/bootstrap"
        - "**/*.json.tmpl"
        - "**/*.pem"
    environment:
      GITHUB_APP_ID: ${self:custom.githubAppId}
      STAGE: ${opt:stage, 'dev'}